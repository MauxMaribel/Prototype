{
	id: "tree_leaves",


	properties: {
		saturation: { type: "decimal", default: 1.0 },
		hue: { type: "decimal", default: 0.0 },
		lum: { type: "decimal", default: 1.0 },
	},

	events: {

		//this event occurs every frame.
		process: "
		if(not animated_movements,
		set(animation, 'stand_down'),
			)
		",
	},

	//this defines all the animations the character has in her spritesheet.
	animation: [

	{
		id: "stand_down",
		image: "sprites/item_sheet.png",
		x: 192, y: 1, w: 62, h: 62,
		frames: 1,
		pad: 1,	prototype: ["prop"],
		duration: -1,
		scale: 4,
	},

	],

		shader: {
		name: "leaf_render",

		fragment: "
        uniform sampler2D u_anura_tex_map;
		varying vec2 v_texcoord;
		uniform float u_property_saturation;
		uniform float u_property_hue;
		uniform float u_property_lum;
		uniform float u_property_alpha;
		vec3 rgb_to_hsv(vec3 c)
				{
			vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
			vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
			vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
			float d = q.x - min(q.w, q.y);
			float e = 1.0e-10;
			return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
		}
		vec3 hsv_to_rgb(vec3 c)
		{
			vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
			vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
			return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
		}

        void main()
        {
			gl_FragColor = texture2D(u_anura_tex_map, v_texcoord);
			vec3 hsv = rgb_to_hsv(gl_FragColor.rgb);
            hsv[0] += u_property_hue;
            hsv[1] *= u_property_saturation;
            hsv[2] *= u_property_lum;
			gl_FragColor.rgb = hsv_to_rgb(hsv);

			}"
		},
}
