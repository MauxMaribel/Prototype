{
	id: "shader_example",

	properties: {
		//this is a property which we can give as a parameter to the shader.
		//you can make any property a parameter to a shader just by putting
		//it in the shader's list of uniforms.
		luminance_increase: { type: "decimal", default: 0.0 },
	},

	//This defines a basic shader for an object. Use this as a starting
	//point to do something cool with a shader.
	shader: {
		//just give your shader a unique name, doesn't matter what it is.
		name: "shader_example",

		//this defines a program which is run for every pixel that is
		//drawn. Its job is to decide what color pixel to draw when
		//drawing this object.
		fragment: "
		
		//parameters to the shader go here.

        uniform sampler2D u_anura_tex_map;
		uniform vec4 u_anura_sprite_area;
		varying vec2 v_texcoord;

		//this parameter will always have the luminance_increase
		//property of the object from the object's properties: section
		//filled in. Note it has to have exactly the same name as the
		//property in the properties section just with u_property_ added
		//in front of it.
		uniform float u_property_luminance_increase;
		
		//shaders work in rgb mode but sometimes it's really nice to
		//work on hsv. Here are some super useful functions for
		//converting to/from hsv from rgb.
		vec3 rgb_to_hsv(vec3 c)
		{
			vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
			vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
			vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
			float d = q.x - min(q.w, q.y);
			float e = 1.0e-10;
			return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
		}
		vec3 hsv_to_rgb(vec3 c)
		{
			vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
			vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
			return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
		}

        void main()
        {
			//this is the 'normal' way to just draw an image straight.
			//Just find what color the pixel in the object's image is.
			gl_FragColor = texture2D(u_anura_tex_map, v_texcoord);

			//If we want to do some kind of transformation by converting
			//to hsv we can do it here. We convert our rgb color to hsv,
			//do any kind of transformation on  the hsv and then
			//convert it back to rgb at the end
			vec3 hsv = rgb_to_hsv(gl_FragColor.rgb);

			//PUT ANY TRANSFORMATIONS IN HERE. E.G. to increase luminance:
			// hsv[2] += u_property_luminance_increase;

			gl_FragColor.rgb = hsv_to_rgb(hsv);
		}
		",
	},
}
