{
	id: "character_status",
	is_strict: true,
	use_absolute_screen_coordinates: true,

	zorder: 10000,

	properties: {

		width: "int :: round_to_even(int(196*scaling))",
		height: "int :: round_to_even(int(96*scaling))",
		scaling: "decimal :: lib.gui.dpy(3.0)",

		unit: { type: "class unit" },

		unit_avatar: { type: "null|custom_obj" },

		render: "def() ->commands
		set(animation, {
			id: 'fbo',
			image: 'fbo',
			x: 0, y: 0, w: width, h: height,
			scale: 1.0,
			frames: 1,
			fbo: c.render(width, height, [
				c.scale(scaling),

				c.paint_image('images/gui/gui_status_bar.png'),

				c.set_source_color('black'),

				c.translate(12, 40),

				map(fragments,
				[
					c.save(),
					value.path,
					c.fill(),
					c.restore(),
				]
				)

				where fragments = c.markup_text(sprintf(q(<font size='6'><font size='+2'>%s</font>
Life: %d/%d
Attack: %d
Move: %d</font>), unit.name, unit.life, unit.max_life, unit.attack, unit.moves), width),
			])
		})
		where c = canvas()
		",
	},

	events: {
		create: "render();
		set(x, 0);
		set(y2, level.camera_position[3]);

		spawn(unit.id, {
			zorder: zorder+1,
			mid_x: x + lib.gui.py(80),
			y: y + lib.gui.py(14),
		}, [
			set(unit_avatar, child),
		])
		
		",

		being_removed: "remove_object(unit_avatar)",
	},
}
