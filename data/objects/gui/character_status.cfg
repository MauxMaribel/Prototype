{
	id: "character_status",
	is_strict: true,
	use_absolute_screen_coordinates: true,

	zorder: 10000,

	properties: {

		width: "int :: round_to_even(int(196*scaling))",
		height: "int :: round_to_even(int(96*scaling))",
		scaling: "decimal :: lib.gui.dpy(3.0)",

		unit: { type: "class unit" },

		unit_avatar: { type: "null|custom_obj" },

		render: "def() ->commands
		set(animation, {
			id: 'fbo',
			image: 'fbo',
			x: 0, y: 0, w: width, h: height,
			scale: 1.0,
			frames: 1,
			fbo: c.render(width, height, [
				c.scale(scaling),

				c.paint_image('images/gui/gui_status_bar.png'),

				c.set_source_color('black'),

				c.save(),

				c.translate(12, 40),

				map(fragments,
				[
					c.save(),
					value.path,
					c.fill(),
					c.restore(),
				]
				)

				where fragments = c.markup_text(sprintf(q(<font size='6'><font size='+2'>%s</font>
Life: %d/%d
Attack: %d
Move: %d</font>), unit.name, unit.life, unit.max_life, unit.attack, unit.moves), width),

				c.restore(),

				c.set_source_color('black'),

				c.translate(50, 12),
				map(unit.spells,
				[
					c.save(),
					map(icon_fragments,
					[
						c.save(),
						c.set_source_color('white'),
						c.translate(value.x + value.width/2.0, value.y + value.height/2.0),
						c.arc(0, 0, 4.1, 0, 3.15*2),
						c.fill(),
						c.restore(),
						
						c.save(),
						c.set_source_color(spell.icon_color),
						value.path,
						c.fill(),

						c.restore(),
					]),

					c.translate(8, 0),
					map(fragments,
					[
						c.save(),
						c.set_source_color(value.color),
						value.path,
						c.fill(),
						c.restore(),
					]
					),
					c.restore(),

					c.translate(0, 6 + (decimal<- max(map(fragments, value.y + value.height))))
				]
				where icon_fragments = c.markup_text(sprintf(q(<font size='5'><img src='images/icons/%s'></img></font>), spell.icon), 10)
				where fragments = c.markup_text(sprintf(q(<font size='5' color='#000000'><b>%s</b> (ready, cooldown: %d, range: %d)&emdash;%s</font>),
				  spell.name, spell.cooldown, spell.range, spell.description), width/scaling - 66)
				where spell = lib.game.get_spell(value.spell)
				)
			])
		})
		where c = canvas()
		",
	},

	events: {
		create: "render();
		set(x, 0);
		set(y2, level.camera_position[3]);

		spawn(if(unit.custom_appearance != null, 'character_custom', unit.id), {
			zorder: zorder+1,
			mid_x: x + lib.gui.py(80),
			y: y + lib.gui.py(34),
			use_absolute_screen_coordinates: true,
		} + if(unit.custom_appearance != null, { character: unit.custom_appearance }, {}), [
			set(unit_avatar, child),
		])
		
		",

		being_removed: "remove_object(unit_avatar)",
	},
}
