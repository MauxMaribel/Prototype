{
	id: "character_editor",
	is_strict: true,
	always_active: true,

	properties: {
		_width: "int :: 700",
		_height: "int :: 400",

		character_type: { type: "string", default: "Human" },

		_character_type: "CharacterType :: lib.character_info.get_character(character_type)",

		render: "def() ->commands
		set(animation, {
			id: 'fbo',
			image: 'fbo',
			fbo: c.render(_width, _height, [
				c.set_source_rgba(0.3, 0.3, 0.3, 1),
				c.rectangle(0, 0, _width, _height),
				c.fill(),

				c.set_source_rgba(0.1, 0.1, 0.1, 1),
				c.rectangle(_width - 110, 10, 104, 120),
				c.fill(),

				c.set_source_rgba(0.7, 0.7, 0.7, 1),
				c.rectangle(_width - 110, 10, 104, 120),
				c.set_line_width(1),
				c.stroke(),

			]) where c = canvas(),
			x: 0,
			y: 0,
			w: _width,
			h: _height,
			scale: 1.0,
			frames: 1,
			duration: -1,
		})
		",

		create_preview: "def() ->commands
			
			spawn('character_custom', {
				zorder: zorder+1,
				x2: x2 - 28,
				y: y + 50,
				character: if(_preview, _preview.character, {
					type: character_type,
					components: {},
				}),
			}, [
				remove_object(_preview),
				set(_preview, child),
			])
		",

		change_preview_dir: "def() ->commands
		if(_preview,
			_preview.set_pose('stand', if(facing = 'down', 'right', facing = 'right', 'up', 'down'))
			where facing = _preview.get_facing()
		)
		",

		_preview: { type: "null|obj character_custom", set: "if(value != _data, [remove_object(_data), set(_data, value)])" },
		preview: "obj character_custom<- _preview",
		character_info: "CharacterInstance :: preview.character",

		_current_component: "CharacterComponentType :: _character_type.components[_combo.selected_index] asserting _combo != null",

		_combo: { type: "null|obj combo_controller" },

		_widgets: { type: "[custom_obj]", default: [] },

		_options: { type: "[obj character_editor.character_option]", default: [] },

		_pane: { type: "null|obj scrollable_pane" },

		change_section: "def(int n) ->commands
		let pane_pos = if(_pane, _pane.current_position, 0);
		map(_widgets, remove_object(value));
		set(_widgets, []);

		spawn('button_controller', {
			mid_x: x2 - 60,
			y: y + 140,
			text: 'Rotate',
			on_click: me.change_preview_dir,
			_font_size: 12,
			button_width: 80,
			button_height: 20,
		}, [
			add(_widgets, [child])
		]);

		[

		[
		spawn('scrollable_pane', {
			x: x + 10,
			y: y + 40,
			area_width: 400,
			area_height: 340,
			zorder: zorder+10,
			focus_override: true,
			step_size: 60,
			elements: map(component.variations, {
				xpos: (index%3)*130,
				ypos: (index/3)*160,
				height: 140,
				obj: options[index],

			}),
		}, [
			add(_widgets, [child]),
			set(_pane, child),
		]);

		if(_pane, _pane.move_position(pane_pos)),

		set(_options, options),
		
		]
		where options = map(component.variations,
		 object('character_editor.character_option', {
					zorder: me.zorder+10,
					click: def() ->commands (if(info != null, set(info.index, index), set(character_info.components[component.name], { index: index })); create_preview(); change_section(n) where info = character_info.components[component.name]),
					selected: (index = selected_index),
					character: {
						type: character_info.type,
						components: character_info.components + { (component.name): { index: index, colors: if(existing_component != null, existing_component.colors) } }
						  where existing_component = character_info.components[component.name],
					}
				})
		),

		set(color_editors, {});

		if(selected_index != null,
			map(color_adjustments, [
				spawn('label', {
					_text: [value.name],
					_font_size: 14,
					_halign: 'left',
					x: x2 - 250,
					y: y + 6 + index*140,
					zorder: zorder+1,
				}, [
					add(_widgets, [child]),
				]),
				
				spawn('color_editor', {
					x: x2 - 260,
					y: y + 40 + index*140,
					palette: palette,
					_initial_values:
					if(info.colors != null and value.name in info.colors,
 					   info.colors[value.name],
					   lib.color.rgb_to_hsv(if(value.rgb is [int,int,int],
					                           [value.rgb.x/255.0, value.rgb.y/255.0, value.rgb.z/255.0],
					                           value.rgb
					                        ))
					),
					on_change: update_colors,
					zorder: zorder+1+index,
				}, [
					add(_widgets, [child]),
					set(color_editors[value.name], child),
				])
			]
			where palette = map((_character_type.palettes or {})[value.name] or [], lib.color.rgb_to_hsv([value.x/255.0, value.y/255.0, value.z/255.0]))
			)
			where color_adjustments = [ComponentColorAdjustment] :: if(variation != null, variation.color_adjustments or [], [])
			where variation = null|CharacterComponentInstance :: component.variations[selected_index]
		)
		]
		where selected_index = if(info, info.index)
		where info = character_info.components[component.name]
		where component = _character_type.components[n]
		",

		update_colors: "def() ->commands
		[
			set(character_info.components[_current_component.name].colors, colors);
			create_preview();

			map(_options, add(value.character.components[_current_component.name].colors, colors));
			map(_options, value.create_preview())
		]
		where colors = sum(map(color_editors, {(key): value.current_values}), {})
		",

		color_editors: { type: "{string -> obj color_editor}", default: {} },
	},

	events: {
		create: "[
			render();
			create_preview();

			spawn('combo_controller', {
				x: x + 10,
				y: y + 10,
				selected_index: 0,
				on_change: me.change_section,
				items: map(_character_type.components, value.name),
				_width: 120,
				_height: 24,
				zorder: me.zorder+50,
				_font_size: 16,
			}, [
				set(_combo, child),
			]);

			change_section(0)
		]",

		being_removed: "[
			set(_preview, null),
			map(_widgets, remove_object(value)),
			remove_object(_combo),
		]",
	},

	object_type: [{
		id: "character_option",
		is_strict: true,

		properties: {
			_width: "int :: 120",
			_height: "int :: 140",
			selected: { type: "bool" },
			highlight: { type: "bool", default: false, change: "render()" },
			character: { type: "CharacterInstance" },

			click: { type: "function()->commands" },

			render: "def() ->commands
			set(animation, {
				id: 'fbo',
				image: 'fbo',
				fbo: c.render(_width, _height, [
					if(highlight, c.set_source_rgba(0.7, 0.7, 0.4, 1), c.set_source_rgba(0.4, 0.4, 0.4, 1)),
					c.rectangle(0, 0, _width, _height),
					c.fill(),

					if(selected, c.set_source_rgba(1, 1, 1, 1), c.set_source_rgba(0.7, 0.7, 0.7, 1)),
					c.rectangle(0, 0, _width, _height),
					c.set_line_width(4),
					c.stroke(),

				]) where c = canvas(),
				x: 0,
				y: 0,
				w: _width,
				h: _height,
				scale: 1.0,
				frames: 1,
				duration: -1,
			})
			",

			create_preview: "def() ->commands
			[
			remove_object(preview),
			spawn('character_custom', {
				zorder: zorder+10,
				x: x+10,
				y: y+10,
				character: character,
			}, [
				set(preview, child),
			])
			]
			",

			preview: { type: "null|obj character_custom" },
		},

		events: {
			create: "render(); create_preview()",
			being_added: "if(preview, add_object(preview))",
			being_removed: "remove_object(preview)",
			process: "[
				if(preview, [
					set(preview.mid_xy, mid_xy),
					preview.set_clip_area(clip_area, clip_area_absolute),
				]),
			]",

			mouse_enter: "set(highlight, true)",
			mouse_leave: "set(highlight, false)",

			click: "click()",
		}
	}],
}
