{
	id: "character_editor",
	is_strict: true,
	always_active: true,

	properties: {
		_width: "int :: 500",
		_height: "int :: 400",

		character_type: { type: "string", default: "Human" },

		_character_type: "CharacterType :: lib.character_info.get_character(character_type)",

		render: "def() ->commands
		set(animation, {
			id: 'fbo',
			image: 'fbo',
			fbo: c.render(_width, _height, [
				c.set_source_rgba(0.3, 0.3, 0.3, 1),
				c.rectangle(0, 0, _width, _height),
				c.fill(),

				c.set_source_rgba(0.1, 0.1, 0.1, 1),
				c.rectangle(_width - 110, 10, 104, 120),
				c.fill(),

				c.set_source_rgba(0.7, 0.7, 0.7, 1),
				c.rectangle(_width - 110, 10, 104, 120),
				c.set_line_width(1),
				c.stroke(),

			]) where c = canvas(),
			x: 0,
			y: 0,
			w: _width,
			h: _height,
			scale: 1.0,
			frames: 1,
			duration: -1,
		})
		",

		create_preview: "def() ->commands
			spawn('character_custom', {
				zorder: zorder+1,
				x2: x2 - 24,
				y: y + 50,
				character: {
					type: character_type,
					components: {},
				},
			}, [
				set(_preview, child),
			])
		",

		_preview: { type: "null|obj character_custom", set: "if(value != _data, [remove_object(_data), set(_data, value)])" },
		preview: "obj character_custom<- _preview",
	},

	events: {
		create: "[
			render();
			create_preview(),
		]",

		being_removed: "[
			set(_preview, null),
		]",
	},
}
