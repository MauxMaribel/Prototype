{
	id: "icon_button",
	is_strict: true,
	always_active: true,

	properties: {
		icon: { type: "string" },
		icon_color: { type: "[decimal,decimal,decimal]", default: [1.0,1.0,1.0] },
		bg_color: { type: "[decimal,decimal,decimal]", default: [1.0,0.0,0.0] },

		shader_bg_color: "[decimal,decimal,decimal] :: if(_mouseover, [1.0,1.0,1.0], bg_color)",
		shader_fg_color: "[decimal,decimal,decimal] :: if(_mouseover, [0.0,0.0,0.0], icon_color)",

		_mouseover: { type: "bool", default: false },

		disabled: { type: "bool", default: false },

		luminance: "decimal :: if(disabled, 0.4, 1.0)",

		texture_size: { type: "int", init: "lib.gui.py(128)" },
		render: "def() ->commands
		set(animation, {
			id: 'svg',
			image: 'svg',
			fbo: _render_internal(),
			x: 0,
			y: 0,
			w: texture_size,
			h: texture_size,
			scale: 1.0,
			frames: 1,
			duration: -1,
		})
		",

		_render_internal: "def() ->texture_object
		c.render(texture_size, texture_size, [
			c.arc(texture_size/2, texture_size/2, texture_size/2, 0, 2*3.15),
			c.set_source_rgba(0.6, 0.6, 0.6, 1.0),
			c.fill(),

			c.arc(texture_size/2, texture_size/2, texture_size*0.4, 0, 2*3.15),
			c.set_source_rgba(0.5, 0.0, 0.0, 1.0),
			c.fill(),

			c.set_line_width(texture_size*0.02),
			c.set_source_color('black'),

			c.arc(texture_size/2, texture_size/2, texture_size/2, 0, 2*3.15),
			c.stroke(),

			c.arc(texture_size/2, texture_size/2, texture_size*0.4, 0, 2*3.15),
			c.stroke(),

			c.arc(texture_size/2, texture_size/2, texture_size*0.4, 0, 2*3.15),
			c.clip(),

			c.translate(texture_size/10, texture_size/10),
			c.set_source_rgba(1.0, 0.0, 0.0, 1.0),
			c.scale(0.8*texture_size/512.0),
			c.draw_svg(sprintf('images/icons/%s', icon), 512, 512),
		])
		where c = canvas()
		",

		tooltip: { type: "null|string" },

		_tooltip_obj: { type: "null|obj tooltip" },

		handle_click: { type: "function()->commands" },
		
		handle_mouseover: { type: "null|function()->commands" },
		handle_mouseoff: { type: "null|function()->commands" },

		_mouse_enter: "def() ->commands [
			set(_mouseover, true),
			if(tooltip != null and _tooltip_obj = null,
				spawn('tooltip', {
					text: tooltip,
					mid_x: mid_x,
					y: y2 + 10,
					zorder: zorder+10,
					use_absolute_screen_coordinates: false,
				}, [
					set(_tooltip_obj, child),
				])
			),

			if(handle_mouseover, handle_mouseover()),
		]",
	},

	events: {
		create: "
			render();

			if(dist < texture_size/2,
				_mouse_enter()
			)
			where dist = sqrt(dist_x*dist_x + dist_y*dist_y)
			where dist_x = (mid_x - mouse_pos.x)
			where dist_y = (mid_y - mouse_pos.y)
			where mouse_pos = lib.gui.mouse_pos(level)",

		mouse_enter: "_mouse_enter()",
		mouse_leave: "[
			set(_mouseover, false),
			remove_object(_tooltip_obj),
			set(_tooltip_obj, null),

			if(handle_mouseoff, handle_mouseoff()),
		]",

		click: "[
			swallow_mouse_event(),
			if(not disabled, handle_click()),
		]",

		being_removed: "[
			remove_object(_tooltip_obj),
			set(_tooltip_obj, null),
		]",
	},

	shader: {
		name: "icon_button",

		fragment: "
        uniform sampler2D u_anura_tex_map;
		varying vec2 v_texcoord;
		uniform vec3 u_property_shader_bg_color;
		uniform vec3 u_property_shader_fg_color;
		uniform float u_property_luminance;

		vec3 rgb_to_hsv(vec3 c)
		{
			vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
			vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
			vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
			float d = q.x - min(q.w, q.y);
			float e = 1.0e-10;
			return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
		}
		vec3 hsv_to_rgb(vec3 c)
		{
			vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
			vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
			return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
		}

		void main()
		{
			gl_FragColor = texture2D(u_anura_tex_map, v_texcoord);

			if(gl_FragColor.r >= 0.4 && gl_FragColor.g <= 0.01 && gl_FragColor.b <= 0.01) {
				gl_FragColor.rgb = mix(u_property_shader_bg_color, u_property_shader_fg_color, (gl_FragColor.r-0.5)*2.0);
			}

			vec3 hsv = rgb_to_hsv(gl_FragColor.rgb);
			hsv.b *= u_property_luminance;
			gl_FragColor.rgb = hsv_to_rgb(hsv);
		}
		",
	},
}
