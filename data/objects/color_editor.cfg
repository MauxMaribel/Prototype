{
	id: "color_editor",
	is_strict: true,
	always_active: true,

	properties: {
		_width: "int :: 200",
		_height: "int :: 200",

		current_values: "[decimal,decimal,decimal] :: _get_slider_values",

		_initial_values: { type: "[decimal,decimal,decimal]", default: [1.0, 1.0, 1.0] },

		_sliders: { type: "[obj slider_widget]", default: [] },

		_get_slider_values: "[decimal,decimal,decimal] <-
			map(_sliders, value.slider_value)
		",

		_get_color: "[decimal,decimal,decimal] ::
			lib.color.hsv_to_rgb(_get_slider_values)
		",

		on_change: { type: "null|function()->commands" },

		on_update_values: "def(decimal new_value) ->commands
		[
			render(),
			if(on_change, on_change()),
		]
		",

		render: "def() ->commands
				set(animation, {
				id: 'svg',
				image: 'svg',
				fbo: c.render(_width, _height, [
					c.set_source_rgba(0.3, 0.3, 0.3, 1),
					c.rectangle(0, 0, _width, _height),
					c.fill(),

					map(range(3), [
						map(range(num_divisions),

						[
							c.rectangle(rect_xpos, rect_ypos, 1, rect_height),
							c.set_source_color(lib.color.hsv_to_rgb(pixel_hsv)),
							c.fill(),
						]

						where pixel_hsv = [decimal,decimal,decimal]<- (hsv[:component] + [decimal(index)/decimal(num_divisions)] + hsv[component+1:])

						where rect_xpos = 10 + (decimal(index)/decimal(num_divisions))*(_width - 20)
						),
					]
					where component = value
					where rect_ypos = 10 + index*24 + 6
					where rect_height = 4
					where num_divisions = _width - 20
					),

					c.set_source_color(color),
					c.rectangle(0, _height/2, _width, _height/2),
					c.fill(),
				])
				where color = _get_color
				where hsv = _get_slider_values
				where c = canvas(),
				x: 0,
				y: 0,
				w: _width,
				h: _height,
				scale: 1.0,
				frames: 1,
				duration: -1,
			})
		",		
	},

	events: {
		create: "[

			map(range(3),
				spawn('slider_widget', {
					x: x + 10,
					y: y + 10 + index*24,
					slider_width: _width-20,
					slider_height: 16,
					zorder: zorder - 1,
					value_change_handler: on_update_values,
					slider_value: _initial_values[index],
				}, [
					add(_sliders, [child]),
				])
			);

			render()
		]",

		being_removed: "[
			map(_sliders, remove_object(value))
		]",

		type_updated: "fire_event('being_removed'); fire_event('create')",
	},
}
