{
	id: "life_bar",
	is_strict: true,

	properties: {
		dim: "[int,int] :: [48, 12]",

		threat: { type: "int", default: 0, change: "set(_dirty, true)" },
		life: { type: "int", change: "set(_dirty, true)" },
		max_life: { type: "int" },

		_dirty: { type: "bool", default: false },

		ratio: "decimal :: (decimal(life)/max_life) asserting max_life != 0",

		threat_ratio: "decimal :: decimal(min(threat,life))/max_life",

		render: "def() ->commands
		[
		set(animation, {
			id: 'fbo',
			image: 'fbo',
			x: 0, y: 0, w: dim.x, h: dim.y,
			scale: 1.0,
			frames: 1,
			duration: -1,
			fbo: c.render(dim.x, dim.y, [
				c.rectangle(2, 2, (dim.x-4)*ratio, dim.y-4),
				c.set_source_color([0.0, 0.0, 0.7, 1.0]),
				c.fill(),
				
				c.rectangle(2, 2 + (dim.x-4)*(ratio-threat_ratio), (dim.x-4)*threat_ratio, dim.y-4),
				c.set_source_color([0.7, 0.0, 0.0, 1.0]),
				c.fill(),

				c.set_line_width(1.5),
				c.set_source_color([1.0, 1.0, 1.0, 1.0]),
				c.rectangle(1, 1, dim.x-2, dim.y-2),
				c.stroke(),
			]),
		}),
		set(_dirty, false),
		]
		where c = canvas()
		",
	},

	events: {
		create: "render()",
		process: "if(_dirty, render())",
	},
}
