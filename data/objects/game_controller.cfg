{
	id: "game_controller",
	is_strict: true,
	is_human: true,
	always_active: true,
	hidden_in_game: true,

	prototype: ["game_controller_base"],

	properties: {
		characters: { type: "[obj character]", default: [] },

		present_game_state: "def() ->commands
		[
			[remove_object(c) | c <- characters, find(state.units, value._uuid = c.unit_info_or_die._uuid) = null];
			set(characters, [c | c <- characters, find(state.units, value._uuid = c.unit_info_or_die._uuid) != null]);

			map(characters, value.unit_info_updated());

			[spawn(c.id, {
				unit_info: c,
			}, [
				add(characters, [child]),
				child.unit_info_updated(),
			] asserting child is obj character)
			| c <- state.units, find(characters, value.unit_info_or_die._uuid = c._uuid) = null],


		]
		",
	},

	events: {
		create: "
		let characters = filter(level.chars, value is obj character);
		map(characters, remove_object(value));
		schedule(1, ;
		send({
			type: 'setup_characters',
			characters: [{
				id: c.type,
				loc: c.calculate_loc,
				side: 0,
			} | c <- characters],
		})
		)
		",
	},
}
