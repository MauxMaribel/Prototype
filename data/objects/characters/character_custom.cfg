{
	id: "character_custom",
	prototype: ["character"],
	hidden_in_game: true,

	properties: {
		//use this to control her position within a tile.
		position_offset: "[int,int] :: [0,-24]",

		character: { type: "CharacterInstance" },

		_components: { type: "[obj character_component]", default: [] },

		create_components: "def() ->commands
		map(character_type.components,
			if(component_index != -1,
			[
				spawn('character_component', {
					_parent: me,
					info: component_instance,
					zorder: zorder + value.zorder,
					color_adjustments: if(component_info != null, component_info.colors) or {},
					use_absolute_screen_coordinates: use_absolute_screen_coordinates,
				}, [
					add(_components, [child]),
				]),

				if(value.name not in character.components, set(character.components[value.name], { index: component_index })),
			]
				where component_instance = value.variations[component_index]
			)

			where component_index = if(component_info != null, component_info.index, value.optional != true, 1d(size(value.variations)) - 1, -1)
			where component_info = character.components[value.name]
		)
		where character_type = lib.character_info.get_character(character.type)
		",

		set_pose: "def(string pose, null|string face=null) ->commands
		if([pose,facing] != _pose, [
			set(_pose, [pose,facing]),
			map(_components, [
				set(value.pose, pose),
				set(value.character_facing, facing);
				value.render()
			])
		])
		where facing = string<- if(face = null and _pose = null, 'down', face = null and _pose != null, _pose[1], face)
		",

		get_pose: "def()->string if(_pose = null, 'stand', _pose[0])",

		_pose: { type: "[string,string]|null" },
	},

	events: {
		create: "create_components()",
		being_removed: "map(_components, remove_object(value)); _remove_life_bar()",

	},

	animations: [
	{
		id: "stand_down",
		image: "sprites/mainctilesheet.png",
		x: 1, y: 1, w: 31, h: 31,
		frames: 1,
		pad: 1,
	}

	],
}
