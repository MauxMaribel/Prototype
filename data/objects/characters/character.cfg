{
	id: "character",
	is_strict: true,
	always_active: true,

	editor_info: {
		category: "character",

	},

	properties: {
		game_controller: { type: "null|obj game_controller" },

		has_moved: { type: "bool", default: false, change: "animate(me, { saturation: if(has_moved, 0.0, 1.0), lum: if(has_moved, 0.7, 1.0) }, { duration: 10 })" },

		saturation: { type: "decimal", default: 1.0 },
		hue: { type: "decimal", default: 0.0 },
		lum: { type: "decimal", default: 1.0 },

		frozen_anim: { type: "decimal", default: 0.0 },

		flash_hit: { type: "int", default: 0 },

		do_flash_hit: "def() ->commands
		[
			add(flash_hit, 1),
			schedule(2, add(flash_hit, -1)),
		]
		",

		animate_damage: "def(int amount) ->commands
		[
			do_flash_hit(),
			spawn('label', {
				_text: [str(amount)],
				_font_size: lib.gui.py(36),
				_halign: 'center',
				_color: [1,0,0,1],
				mid_x: mid_x,
				mid_y: mid_y,
				zorder: zorder+10,
			}, [
				animate(child, {
					alpha: 0,
					mid_y: mid_y - lib.gui.py(140),
				}, {
					duration: 120,
					on_complete: remove_object(child),
				})
			]),

			if(life_bar,
				animate(life_bar, {
					life: unit_info.life-amount,
				}, {
					duration: 20,
				})
			),
		]
		",

		_unit_info: { type: "null|class unit" },
		unit_info: "class unit<- _unit_info",

		unit_info_updated: "def() ->commands [
			set(mid_x, unit_info.loc.x*tile_dim + tile_dim/2 + position_offset.x),
			set(mid_y, unit_info.loc.y*tile_dim + tile_dim/2 + position_offset.y),
			set(_anim_loc, null),
			set(zorder, 100 + unit_info.loc.y),
			set(has_moved, unit_info.has_moved and (game_controller = null or (game_controller.state.active_unit = null or game_controller.state.active_unit._uuid != unit_info._uuid))),
			set(hue, unit_info.hue_shift),
			_update_life_bar(),

			set(time_in_animation_delta, if(unit_info.status_frozen, 0, 1)),

			animate(me, {
				frozen_anim: if(unit_info.status_frozen, 1.0, 0.0),
			}, {
				duration: 10,
			})
		]",

		//how far to offset this character from the center
		//of the tile. Use this to adjust their position
		//in a tile.
		position_offset: "[int,int] :: [0,0]",

		calculate_loc: "[int,int] ::
		[
			(mid_x - tile_dim/2 - position_offset.x)/tile_dim,
			(mid_y - tile_dim/2 - position_offset.y)/tile_dim,
		]
		",

		set_pose: "def(string pose, null|string facing=null) ->commands
			null
		",

		get_pose: "def()->string ''",

		walk_to_tile_blocking: "def(Loc dst) ->commands

		animate(me, {
			mid_x: dst.x*TILE_DIM + TILE_DIM/2 + position_offset.x,
			mid_y: dst.y*TILE_DIM + TILE_DIM/2 + position_offset.y,
		}, {
			easing: lib.math.linear,
			duration: 12,
			sleep: true,
			name: 'walk',
			replace_existing: false,

			on_begin: ; [
				set(facing, if(dst.x < loc.x, -1, 1)),
				if(desired_anim != animation, set(animation, desired_anim)),
				set_pose('walk', dir),
				set(zorder, 100 + dst.y),
			],

			on_complete: ; [
				set(_anim_loc, dst),
			],
		})

		where desired_anim = if(walk_anim in available_animations, walk_anim, stand_anim in available_animations, stand_anim, animation)
		where stand_anim = sprintf('stand_%s', dir)
		where walk_anim = sprintf('walk_%s', dir)
		where dir = if(dst.y < loc.y, 'up', dst.y > loc.y, 'down', 'right')
		",

		_anim_loc: { type: "null|Loc" },

		loc: "Loc :: _anim_loc or unit_info.loc",

		tile_dim: "int :: 64",

		life_bar: { type: "null|obj life_bar" },

		_life_bar_creation_time: { type: "int", default: 0 },

		show_life_bar: "def() ->commands [
			set(_life_bar_creation_time, level.cycle),
			if(life_bar = null,
				spawn('life_bar', {
					life: unit_info.life,
					max_life: unit_info.max_life,
					zorder: zorder+1,
					alpha: 0,
				}, [
					set(life_bar, child),
					animate(child, {
						alpha: 255,
					}, {
						duration: 10,
					})
				])
			)
		]
		",

		_update_life_bar: "def() ->commands
		if(life_bar != null, [
			set(life_bar.max_life, unit_info.max_life),
			set(life_bar.life, unit_info.life),
		])
		",

		_remove_life_bar: "def() ->commands if(life_bar, execute(life_bar, [
			animate(life_bar, {
				alpha: 0,
			}, {
				on_complete: remove_object(life_bar),
				duration: 10,
			}),
			set(life_bar, null),
		]))",

		mouseover: { type: "bool", default: false },

		click: "def(int button) ->commands
		if(game_controller, [
			swallow_mouse_event();
			if(button = 1, game_controller.character_clicked(me),
			   button = 3, game_controller.character_right_clicked(me)),
		])
		",

		_check_mouseover: "def() ->commands
		if(cycle > _mouseover_change+2,
			if(new_value != mouseover,
				if(new_value, _mouse_enter(), _mouse_leave())
			)

		where new_value = _mouseover > 0
		)
		",

		_mouseover_change: { type: "int", default: 0 },

		_mouseover: { type: "int", default: 0, set: "set(_data, max(0, value)); set(_mouseover_change, cycle); schedule(3, ; _check_mouseover())" },

		mouse_enter: "def() ->commands
			add(_mouseover, 1)
		",

		mouse_leave: "def() ->commands
			add(_mouseover, -1)
		",

		_mouse_enter: "def() ->commands
		if(_unit_info != null,
		[
		set(mouseover, true),
		show_life_bar(),
		if(game_controller != null, game_controller.mouseover_creature(me)),
		if(game_controller != null and game_controller.character_selectable(me),
			animate(me, {
				lum: 1.25,
			}, {
				duration: 10,
			})
		),
		])
		",

		_mouse_leave: "def() ->commands
		if(_unit_info != null,
		[
		set(mouseover, false),
		if(game_controller != null, game_controller.mouseoff_creature(me)),
		if(game_controller != null and (game_controller.character_selectable(me) or lum > 1.0),
			animate(me, {
				lum: 1.0,
			}, {
				duration: 10,
			})
		),
		]
		)
		",
	},

	events: {
		click: "click(arg.mouse_button)",

		mouse_enter: "mouse_enter()",
		mouse_leave: "mouse_leave()",

		process: "
		[
		if(animated_movements = [] and (strstr(animation, 'walk') or get_pose() = 'walk'), [
			if(not me is obj character_custom, set(animation, 'stand' + animation[4:])),
			set_pose('stand'),
		]),

		if(life_bar != null, [
			set(life_bar.zorder, zorder+1),
			set(life_bar.mid_x, mid_x),
			set(life_bar.mid_y, mid_y + lib.gui.py(38)),
			if(mouseover,
			   show_life_bar(),
			   level.cycle > _life_bar_creation_time+30,
			   _remove_life_bar()
			)
		])
		]
		",

		being_removed: "_remove_life_bar()",
	},

		shader: {
		name: "creature_render",

		vertex: "
        uniform mat4 u_anura_mvp_matrix;
        attribute vec4 a_anura_vertex;
        attribute vec2 a_anura_texcoord;
        varying vec2 v_texcoord;
        void main()
        {
            v_texcoord = a_anura_texcoord;
            gl_Position = u_anura_mvp_matrix * a_anura_vertex;
        }
		",

		fragment: "
        uniform sampler2D u_anura_tex_map;
		varying vec2 v_texcoord;
		uniform vec4 u_anura_sprite_area;
		uniform float u_anura_cycle;
		uniform float u_property_saturation;
		uniform float u_property_hue;
		uniform float u_property_lum;
		uniform float u_property_alpha;
		uniform float u_property_frozen_anim;
		uniform int u_property_flash_hit;
		vec3 rgb_to_hsv(vec3 c)
		{
			vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
			vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
			vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
			float d = q.x - min(q.w, q.y);
			float e = 1.0e-10;
			return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
		}
		vec3 hsv_to_rgb(vec3 c)
		{
			vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
			vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
			return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
		}
        void main()
        {
			vec2 sprite_pos = vec2((v_texcoord.x - u_anura_sprite_area.x)/u_anura_sprite_area[2],
			                       (v_texcoord.y - u_anura_sprite_area.y)/u_anura_sprite_area[3]);

			gl_FragColor = texture2D(u_anura_tex_map, v_texcoord);
			vec3 hsv = rgb_to_hsv(gl_FragColor.rgb);
            hsv[0] += u_property_hue;
            hsv[1] *= u_property_saturation;
            hsv[2] *= u_property_lum;
			gl_FragColor.rgb = hsv_to_rgb(hsv);

			if(u_property_frozen_anim > 0.0) {
				//make the character look frozen
				hsv[0] = 0.5;
				hsv[1] *= 0.5;

				float glimmer_pos = fract((sprite_pos.x + sprite_pos.y - u_anura_cycle*0.03)*0.1);

				if(glimmer_pos < 0.03) {
					hsv[2] *= 2.0;
				}

				gl_FragColor.rgb = mix(gl_FragColor.rgb, hsv_to_rgb(hsv), u_property_frozen_anim);
				gl_FragColor.a *= mix(1.0, 0.7, u_property_frozen_anim);
			}

			if(u_property_flash_hit > 0) {
				gl_FragColor.rgb = vec3(1,1,1);
			}

			gl_FragColor.a *= u_property_alpha/255.0;

		}
		",
	},
}
