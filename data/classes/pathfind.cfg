{
	manhattan_distance: "def(Loc a, Loc b) ->int
		abs(a.x - b.x) + abs(a.y - b.y)
	",

	find_path: "def(class game_state state, class unit c, Loc dst) ->[Loc]
		[Loc]<- a_star_search(get_graph(state, c), c.loc, dst, manhattan_distance)
	",

	possible_moves: "def(class game_state state, class unit c) ->[Loc]
		[Loc]<- path_cost_search(get_graph(state, c), c.loc, c.moves)
	",

	get_graph: "def(class game_state state, class unit c) ->weighted_directed_graph

	weighted_graph(dir_graph, def(Loc a, Loc b) ->decimal c.move_cost(state.get_tile(b)))
	where dir_graph = directed_graph(locs_in_range,
	                      def(Loc loc) ->[Loc] filter([
						    [loc.x-1,loc.y],
							[loc.x+1,loc.y],
							[loc.x,loc.y-1],
							[loc.x,loc.y+1],
						   ],
						   value in locs_in_range and find(state.units, value.loc = context.value) = null
						   )
					  )
	
	where locs_in_range = [ [xloc,yloc] | xloc <- range(c.loc.x-c.moves, c.loc.x+c.moves+1), yloc <- range(c.loc.y-c.moves, c.loc.y+c.moves+1)]
	",
}
