{
bases: ['bot_base'],

properties: {
	handle_game_message: "def(class message.game message, object bot) ->commands
	set(_state_id, message.state_id);
	if(message.state.nplayer = message.state.current_player and not message.state.game_over,

		if(u != null, [
			send(bot, {
				type: 'move_unit',
				unit_id: u._uuid,
				dst: chosen_move,
			})

			where chosen_move = Loc<- choose(possible_moves)
			where possible_moves = lib.pathfind.possible_moves(message.state, u) + [u.loc]
		], [
			send(bot, {
				type: 'end_turn',
			})
		])

		where u = find(message.state.units, value.side = message.state.nplayer and value.has_moved = false),

		//not currently our turn
		request_updates(bot)
	)
	",
},
}
