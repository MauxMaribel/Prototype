{
bases: ['bot_base'],

properties: {
	handle_game_message: "def(class message.game message, object bot) ->commands
	set(_state_id, message.state_id);
	if(message.state.nplayer = message.state.current_player and not message.state.game_over,

		if(message.state.active_unit != null,


		if(aggro_target != null,
			send(bot, {
				type: 'attack_unit',
				unit_id: message.state.active_unit._uuid,
				target_loc: aggro_target.loc,
			}),

			send(bot, {
				type: 'rest_unit',
				unit_id: message.state.active_unit._uuid,
			})
		)
			where aggro_target = find(message.state.units, value.side != message.state.active_unit.side and lib.pathfind.manhattan_distance(value.loc, message.state.active_unit.loc) <= message.state.active_unit.attack_range),

		if(unit != null, [
			if(chosen_move = null,
				send(bot, {
					type: 'rest_unit',
					unit_id: unit._uuid,
				}),

				send(bot, {
					type: 'move_unit',
					unit_id: unit._uuid,
					dst: chosen_move,
				})
			)

			where chosen_move = choose(possible_moves, if(aggro_target = null, 0, -lib.pathfind.manhattan_distance(value, aggro_target.loc)))
			where aggro_target = find(message.state.units, value.side != unit.side and lib.pathfind.manhattan_distance(value.loc, unit.loc) <= unit.ai_aggro_radius)
			where possible_moves = lib.pathfind.possible_moves(message.state, unit) + [unit.loc]
		], [
			send(bot, {
				type: 'end_turn',
			})
		])

		where unit = find(message.state.units, value.side = message.state.nplayer and value.has_moved = false)
		),

		//not currently our turn
		request_updates(bot)
	)
	",
},
}
