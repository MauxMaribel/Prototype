{
	bases: ['game_state_base'],

	constructor: "[
		read_level()
	]",

	properties: {

		units: { type: "[class unit]", default: [] },
		props: { type: "[class prop]", default: [] },

		num_teams: { type: "int", default: 2 },

		nturn: { type: "int", default: 0 },

		current_player_index: "int :: nturn%num_teams",

		fires: { type: "{Loc -> int}", init: "{ [12,5]: 1 } + fold(map(range(10), { [12+value,12]: 1 }), a+b, {})" },

		_simulate_fire: "def() ->commands
			let new_fires = filter(fires, 1d6 > value);
			map(fires, if(key not in new_fires, remove_top_tile(key)));
			set(fires, new_fires);
			set(fires, fold(map(fires, {(key): value+1}), a+b, {}));

			map(fires,
				map([[-1,0], [1,0], [0,-1], [0,1]],
					if((target not in fires) and is_inflammable(get_tile(target)) and 1d4 = 1,
						add(fires, {(target): 1})
					)
					
					where target = [loc.x+value.x,loc.y+value.y]
				)
				where loc = key
			)
		",

		extinguish: "def(Loc loc) ->commands
		[
			set(fires, remove_from_map(fires, loc)),
			add_animation(construct('animation.steam_effect', {
				target: loc,
			})),
		]
		",

		ignite: "def(Loc loc, int intensity=100) ->commands
		;

		if(is_inflammable(terrain) and (loc not in fires) and 1d100 <= intensity,
		[

			add(fires, {(loc): 1}),
		],

		   //ice is just insta-removed when ignited.
		   terrain in ['ice'],
		   [
		   	remove_top_tile(loc),
			add_animation(construct('animation.steam_effect', {
				target: loc,
			})),
		   ]
		)
		where terrain = get_tile(loc)",

		is_inflammable: "def(string terrain) ->bool
			terrain in ['grs']
		",

		//fill this in with a calculation later to
		//give 0 if the player has won and 1 if the player has lost.
		//It should be null if there is no winner yet.
		winner_index: "int|null :: null",

		//name of the level we are in.
		level: { type: "string" },

		map_topleft: { type: "[int,int]", default: [0,0] },
		map_dim: { type: "[int,int]", default: [1,1] },
		map_tiles: { type: "{Loc->[[string,int]]}", default: {} },

		add_tile: "def(Loc loc, string abbrev, string zorder_id) ->commands

		if(find(items, value.y = zorder) = null,
		[
			set(map_tiles[loc], sort(items + [[abbrev, zorder]], a.y < b.y)),
			add_animation(construct('animation.add_terrain', {
				target: loc,
				terrain: abbrev,
				zorder: zorder,
			})),

		]
		)

		where items = map_tiles[loc] or []
		where zorder = int<- (map<- get_document('data/zorder.cfg'))[zorder_id]
		",

		remove_top_tile: "def(Loc loc) ->commands
		;
		[
			if(items, [
				add_animation(construct('animation.remove_terrain', {
					target: loc,
					zorder: int<- items[size(items)-1][1],
				})),

				set(map_tiles[loc], items[:size(items)-1])
			])
			where items = map_tiles[loc]
		]
		",

		get_tile: "def(Loc loc) ->string
		if(items, string<- items[size(items)-1][0], '')
		where items = map_tiles[loc]
		",

		tile_dim_px: "int :: 64",

		//unit currently scheduled to do an action after moving.
		active_unit: { type: "null|class unit" },

		move_unit: "def(class unit u, Loc dst) ->commands
		[
			set(u.has_moved, true),
			set(u.loc, dst),
			set(active_unit, u),
			add(u.partial_move, size(path)),

			_do_move(u, path, path_fires),

		]
		where path_fires = filter(path, value in fires)
		where path = lib.pathfind.find_path(me, u, dst)
		",

		_do_move: "def(class unit u, [Loc] path, [Loc] path_fires) ->commands
		if(u not in units or path = [], null,
		   path_fires != [] and path_fires[0] = path[0],
		   [
		   	u.deal_damage(me, 1, enum fire);
			add_animation(construct('animation.damage_unit', {
				unit: u,
				damage: 1,
			}));
			_do_move(u, path, path_fires[1:])
		   ],
		   size(path) <= 1, null,
		   [
			add_animation(construct('animation.move_unit', {
				unit: u,
				path: segment,
			}));

			_do_move(u, path[size(segment)-1:], path_fires)
		   ]
		   where segment = if(path_fires, path[:index(path, path_fires[0])+1], path)
		)

		",

		rest_unit: "def(class unit u) ->commands
		[
			set(u.has_moved, true),
			set(active_unit, null),
		]
		",

		end_turn: "def() ->commands
		[
			[u.end_turn() | u <- units, u.side = current_player_index],

			add(nturn, 1),
			set(active_unit, null),
			map(units, set(value.has_moved, false)),

			_simulate_fire(),
		]
		",

		attack: "def(class unit attacker, Loc target) ->commands
		if(active_unit = attacker,
		[
			set(attacker.has_moved, true),
			set(active_unit, null),

			add_animation(construct('animation.attack_unit', {
				unit: attacker,
				target: target,
				damage: attacker.attack,
			})),

			if(defender != null,
			   defender.deal_damage(me, attacker.attack, enum physical),
			   if(prop != null, prop.deal_damage(me, attacker.attack, enum physical))
			   where prop = find(props, target in value.locs_filled())
			),
		])
				
		where defender = find(units, value.loc = target)",

		get_attack_locs: "def(class unit attacker, Loc loc) ->[Loc]
		[[xpos,ypos]
		  | xpos <- range(loc.x - attacker.attack_range, loc.x + attacker.attack_range+1),
		    ypos <- range(loc.y - attacker.attack_range, loc.y + attacker.attack_range+1),
			loc != [xpos,ypos],
			lib.pathfind.manhattan_distance(loc, [xpos,ypos]) <= attacker.attack_range
		]
		",

		unit_death: "def(class unit u) ->commands
		[
			add_animation(construct('animation.unit_death', {
				unit: u,
			})),

			set(units, filter(units, value != u)),
		]
		",

		prop_death: "def(class prop u) ->commands
		[
//			add_animation(construct('animation.unit_death', {
//				unit: u,
//			})),

			set(props, filter(props, value != u)),
		]
		",


		get_attack_range: "def(class unit attacker, Loc loc) ->[class unit]

		filter(units, value.side != attacker.side and lib.pathfind.manhattan_distance(loc, value.loc) <= attacker.attack_range)
		",

		get_tiles_in_radius: "def(Loc loc, int radius) ->[Loc]
		[[xpos,ypos]
		 | xpos <- range(loc.x - radius, loc.x + radius+1),
		   ypos <- range(loc.y - radius, loc.y + radius+1),
		   lib.pathfind.manhattan_distance(loc, [xpos,ypos]) < radius
		]
		",

		cast_spell: "def(class unit caster, SpellInstance instance, Loc target) ->commands
		[
			add_animation(construct('animation.cast_spell', {
				caster: caster,
				spell: spell,
				target: target,
			})),
			spell.cast(me, caster, target),
			set(instance.cooldown, spell.cooldown),
			set(caster.has_moved, true),
			set(active_unit, null),
		]
		where spell = lib.game.get_spell(instance.spell)",

		_combine_maps: "def({Loc->[[string,int]]} a, {Loc->[[string,int]]} b) ->{Loc->[[string,int]]}
		fold(map(k, { (value): (a[value] or []) + (b[value] or []) }), a+b, {})
		where k = [Loc] :: unique(sort(keys(a) + keys(b)))
		",

		read_level: "def() ->commands
		[
			set(map_dim, [max_x - min_x, max_y - min_y]),
			set(map_topleft, [min_x, min_y]),
			set(map_tiles, all_locs),
		]
		where min_x = int<- min(map(all_locs, key.x))
		where min_y = int<- min(map(all_locs, key.y))
		where max_x = int<- max(map(all_locs, key.x))
		where max_y = int<- max(map(all_locs, key.y))
		where all_locs = fold([{[int,int] -> [[string,int]]}] <- map(loc_maps, value.locs), _combine_maps(a,b), {})
		where loc_maps = map(filter(tile_maps, value['tiles']),

		{
			xpos: xpos,
			ypos: ypos,
			locs: tile_loc_map,
			zorder: cur_zorder,
		}
		
		where tile_loc_map = filter(fold(tile_contents, a+b, {}), value)
		where tile_contents = fold(map(tile_lines,
			map(split(value, ','),
			{
				([xco, yco]): [[value, cur_zorder]],
			}
			 where xco = xpos + index
			)
			where yco = ypos + index
		), a+b, [])
		where tile_lines = split(tiles, '\n')
		where xpos = (int<- m['x'])/tile_dim_px
		where ypos = (int<- m['y'])/tile_dim_px
		where tiles = string<- m['tiles']
		where m = value
		where cur_zorder = zorders[value['zorder']]
		)
		where tile_maps = sort(tile_maps_unsorted, zorders[a['zorder']] < zorders[b['zorder']])
		where tile_maps_unsorted = [map]<- level_doc['tile_map']
		where level_doc = map<- get_document(sprintf('data/level/%s', level))
		where zorders = {string->int}<- get_document('data/zorder.cfg')",

		animation_delay: "def(decimal delay) ->commands
		add_animation(construct('animation.delay', { delay: delay }))
		",

		animations: { type: "[class animation]", default: [] },

		add_animation: "def(class animation anim) ->commands
			add(animations, [anim])
		",
	},
}
